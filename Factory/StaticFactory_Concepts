Java的类是可以创建无数个实例对象的，那么如何去管理这些对象的？如何能够知道创建了多少个这样的对象呢？能不能提供一个统一创建对象的场所呢？（本文在回答该问题的同时，详细的讲解简单工厂模式的原理和实现方式）。

简单工厂模式的原理
简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式，可以理解为是不同工厂模式的一个特殊实现。
A实例调用B实例的方法，称为A依赖于B。如果使用new关键字来创建一个B实例（硬编码耦合），然后调用B实例的方法。一旦系统需要重构：需要使用C类来代替B类时，程序不得不改写A类代码。而用工厂模式则不需要关心B对象的实现、创建过程。

1、定义：专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类，这称为静态工厂方法模式，属于类的创建型模式。简单工厂模式就属于这一类模式。
2、简单工厂模式的实质：是由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类的实例，并且这些产品类继承自一个父类或接口，该模式中包含的角色有以下几方面：

   （1）工厂角色。它是简单工厂模式的核心，它负责实现创建所有实例的内部
            逻辑。工厂类可以被外界直接调用，创建所需的产品对象。
   （2）抽象角色。简单工厂模式所创建的所有对象的父类，它负责描述所有实
            例所共有的公共接口。例如，轿车和卡车都是车，例如下面的代码：
//车类

abstract class Auto{                //汽车的抽象类
    ...
}
class Car extends Auto{             //轿车
    ...
}
class Truck extends Auto{           //卡车
   ...
}


   （3）具体产品角色。是简单工厂模式的创建目标，是一个具体的实例对象，所有创建的对象都是充当这个角色的某个具体类的实例。一般来讲它是抽象产品类的子类，实现了抽象产品类中定义的所有接口方法。

简单工厂模式的实现方式
       在该模式中，工厂类是整个模式的关键所在。它包含必要的判断逻辑，能够根据外界给定的信息，决定究竟应该创建哪个具体类的对象。这个信息一般是工厂方法的参数，例如下面的代码：
class Auto createAuto(int type){
    if(type==1){
        return new Car();           //创造轿车
    }else{
        return new Truck();         //创造卡车
    }
}

      用户在使用时可以直接根据工厂类去创建所需的实例，而无须了解这些对象是如何创建以及如何组织的。有利于整个软件体系结构的优化。但是，简单工厂模式的缺点也正体现在其工厂类上，如果当系统中的具体产品类不断增多时，可能会出现要求工厂类也要做相应的比较大的改动，扩展性并不会很好。

【答案】：以下是以汽车为产品的简单工厂模式的实现示例：
package Factory;

/* 车类 */
abstract class Auto{           //汽车的抽象类
}
class Car extends Auto{        //轿车
}
class Truck extends Auto{      //卡车
}
/* 简单工厂模式 */
class AutoFactory {            //简单工厂模式，这个就是工厂类
    //传递不同的参数，获得不同的产品
    public static Auto createAuto(int autoType){
        if(autoType==0){
            return new Car();  //返回轿车实例
        }else if(autoType==1){
            return new Truck();//返回卡车实例
        }
        return null;
    }
}
public class Main{
    public static void main(String[] args) {
        //主方法
        Auto car=AutoFactory.createAuto(0);  //制造轿车
        Auto truck=AutoFactory.createAuto(1);//制造卡车
    }
}



简单工厂模式的优势
原理：让对象的调用者和对象创建过程分离，当对象调用者需要对象时，直接向工厂请求即可。从而避免了对象的调用者与对象的实现类以硬编码方式耦合，以提高系统的可维护性、可扩展性。
工厂模式也有一个小小的缺陷：当产品修改时，工厂类也要做相应的修改。